name: Video Downloader and Processor

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: 'URL to download'
        required: true
        type: string
      output_filename:
        description: 'Output filename'
        required: false
        type: string
        default: 'downloaded_file'
      download_type:
        description: 'Download type'
        required: false
        type: choice
        options:
        - single
        - batch
        - video_info
        default: 'single'

env:
  PYTHON_VERSION: '3.9'

jobs:
  download-and-process:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          aria2 \
          python3-pip

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install \
          aiohttp \
          aiofiles \
          requests

    - name: Create download utilities script
      run: |
        cat > download_utils.py << 'EOF'
        # Video Downloader Utilities for GitHub Actions
        import os
        import sys
        import json
        import aiohttp
        import aiofiles
        import asyncio
        import subprocess
        
        def duration(filename):
            """Get video duration using ffprobe"""
            result = subprocess.run([
                "ffprobe", "-v", "error", "-show_entries",
                "format=duration", "-of",
                "default=noprint_wrappers=1:nokey=1", filename
            ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            return float(result.stdout)
        
        async def download_file(url, name):
            """Async download wrapper"""
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status == 200:
                        f = await aiofiles.open(name, mode='wb')
                        await f.write(await resp.read())
                        await f.close()
            return name
        
        def get_video_info(video_path):
            """Get comprehensive video information"""
            cmd = [
                'ffprobe', '-v', 'quiet', '-print_format', 'json',
                '-show_format', '-show_streams', video_path
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                return json.loads(result.stdout)
            return None
        
        def generate_thumbnail(video_path, time_position="00:00:10"):
            """Generate thumbnail from video"""
            thumbnail_path = f"{video_path}.jpg"
            cmd = f'ffmpeg -i "{video_path}" -ss {time_position} -vframes 1 -q:v 2 "{thumbnail_path}"'
            subprocess.run(cmd, shell=True, capture_output=True)
            return thumbnail_path if os.path.exists(thumbnail_path) else None
        
        async def download_with_ytdlp(url, output_name):
            """Download using yt-dlp with aria2c"""
            cmd = f'yt-dlp -f "best[height<=720]" -o "{output_name}" --external-downloader aria2c --downloader-args "aria2c: -x 16 -j 32" {url}'
            process = await asyncio.create_subprocess_shell(
                cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            return process.returncode == 0
        EOF

    - name: Single file download
      if: inputs.download_type == 'single'
      run: |
        python << 'EOF'
        import asyncio
        import os
        from download_utils import download_file, get_video_info, generate_thumbnail
        
        async def main():
            url = "${{ github.event.inputs.download_url }}"
            output_name = "${{ github.event.inputs.output_filename }}"
            
            print(f"🚀 Starting download from: {url}")
            print(f"📁 Output file: {output_name}")
            
            # Download file
            result = await download_file(url, output_name)
            if result:
                print(f"✅ Download completed: {result}")
                
                # Get file size
                file_size = os.path.getsize(output_name)
                print(f"📊 File size: {file_size} bytes")
                
                # If it's a video file, get info and generate thumbnail
                if output_name.lower().endswith(('.mp4', '.mkv', '.webm', '.avi')):
                    print("🎥 Video file detected, gathering info...")
                    video_info = get_video_info(output_name)
                    if video_info:
                        print(f"📹 Video info: {json.dumps(video_info, indent=2)}")
                    
                    thumbnail = generate_thumbnail(output_name)
                    if thumbnail:
                        print(f"🖼️ Thumbnail generated: {thumbnail}")
            else:
                print("❌ Download failed")
                sys.exit(1)
        
        asyncio.run(main())
        EOF

    - name: Batch download processor
      if: inputs.download_type == 'batch'
      run: |
        python << 'EOF'
        import asyncio
        import aiohttp
        import aiofiles
        import json
        
        async def download_batch():
            # Read URLs from file or use provided URL as list source
            url = "${{ github.event.inputs.download_url }}"
            output_name = "${{ github.event.inputs.output_filename }}"
            
            print("🔄 Starting batch download process...")
            
            # This could be extended to read from a URLs file
            # For now, using a simple example
            urls = [url]  # In real scenario, this would be multiple URLs
            
            async with aiohttp.ClientSession() as session:
                tasks = []
                for i, download_url in enumerate(urls):
                    filename = f"{output_name}_{i+1}.mp4"
                    task = download_single(session, download_url, filename)
                    tasks.append(task)
                
                results = await asyncio.gather(*tasks)
                print(f"📊 Batch download completed. Results: {results}")
        
        async def download_single(session, url, filename):
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        async with aiofiles.open(filename, 'wb') as file:
                            await file.write(await response.read())
                        print(f"✅ Downloaded: {filename}")
                        return filename
                    else:
                        print(f"❌ Failed to download {url}: HTTP {response.status}")
                        return None
            except Exception as e:
                print(f"❌ Error downloading {url}: {str(e)}")
                return None
        
        asyncio.run(download_batch())
        EOF

    - name: Video information extractor
      if: inputs.download_type == 'video_info'
      run: |
        python << 'EOF'
        import os
        import json
        from download_utils import get_video_info, duration, generate_thumbnail
        
        def analyze_video():
            url = "${{ github.event.inputs.download_url }}"
            output_name = "${{ github.event.inputs.output_filename }}"
            
            print("🔍 Analyzing video information...")
            
            # First download the video
            import requests
            response = requests.get(url, stream=True)
            if response.status_code == 200:
                with open(output_name, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                print(f"✅ Video downloaded: {output_name}")
                
                # Get video duration
                vid_duration = duration(output_name)
                print(f"⏱️ Duration: {vid_duration:.2f} seconds")
                
                # Get comprehensive video info
                video_info = get_video_info(output_name)
                if video_info:
                    print("📊 Video Analysis Results:")
                    print(json.dumps(video_info, indent=2))
                
                # Generate thumbnail
                thumbnail = generate_thumbnail(output_name)
                if thumbnail:
                    print(f"🖼️ Thumbnail created: {thumbnail}")
                
                # File size
                file_size = os.path.getsize(output_name)
                print(f"💾 File size: {file_size} bytes ({file_size / 1024 / 1024:.2f} MB)")
            else:
                print(f"❌ Failed to download video: HTTP {response.status_code}")
        
        analyze_video()
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: downloaded-files
        path: |
          *.mp4
          *.mkv
          *.webm
          *.jpg
          *.pdf
        retention-days: 7

    - name: Summary
      run: |
        echo "🎉 Download and processing completed!"
        echo "📁 Files downloaded:"
        ls -la *.mp4 *.mkv *.webm *.jpg *.pdf 2>/dev/null || echo "No files to display"
        echo "📊 Disk usage:"
        df -h
